{"version":3,"sources":["components/Times.js","components/Timer.js","App.js","serviceWorker.js","index.js"],"names":["Times","ms","className","hours","Math","floor","msMinutes","Rhours","minutes","msSeconds","Rminutes","seconds","String","padStart","ConvertTime","Timer","props","start","state","inter","setState","reset","timeMs","setInterval","this","type","value","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6PA+BeA,EAhBD,SAAC,GAAY,IAAVC,EAAS,EAATA,GACb,OAAQ,yBAAKC,UAAU,cACnB,yBAAKA,UAAU,cACX,yBAAKA,UAAU,gBAhBP,SAAAD,GAChB,IAGME,EAAQC,KAAKC,MAAMJ,EADTK,MAEVC,EAASN,EAFCK,KAGVE,EAAUJ,KAAKC,MAAME,EAJTE,KAKZC,EAAWH,EALCE,IAMZE,EAAUP,KAAKC,MAAMK,EAPT,KASlB,OAAOE,OAAOT,GAAOU,SAAS,EAAG,KAAO,IAAMD,OAAOJ,GAASK,SAAS,EAAG,KAAO,IAAMD,OAAOD,GAASE,SAAS,EAAG,KAOtGC,CAAYb,IAEjB,yBAAKC,UAAU,aACX,uBAAGA,UAAU,kBAAb,UACA,uBAAGA,UAAU,kBAAb,WACA,uBAAGA,UAAU,kBAAb,gBC0BDa,E,YA5CX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAeVC,MAAQ,WACC,EAAKC,MAAMC,MAKxB,EAAKC,SAAS,CAACD,OAAM,IAJT,EAAKC,SAAS,CACVD,OAAO,KAnBA,EAyBnBE,MAAQ,WACJ,EAAKD,SAAS,CAACE,OAAQ,EAAGH,OAAO,KAxBjC,EAAKD,MAAQ,CACTI,OAAQ,EACRH,OAAO,GAEXI,aACI,WACI,EAAKL,MAAMC,OACP,EAAKC,SAAS,CACVE,OAAQ,EAAKJ,MAAMI,OAAS,QAGxC,KAbW,E,sEA6Bf,OACI,yBAAKpB,UAAU,WACX,kBAAC,EAAD,CAAOD,GAAIuB,KAAKN,MAAMI,SACtB,2BAAOG,KAAK,SACRC,MAAOF,KAAKN,MAAMC,MAAQ,QAAU,QACpCjB,UAAU,cACVyB,QAASH,KAAKP,QAClB,2BAAOQ,KAAK,SACRC,MAAM,QACNxB,UAAU,cACVyB,QAASH,KAAKH,a,GAxCdO,aCQLC,EAPH,WACV,OAAO,6BACL,kBAAC,EAAD,QCIgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ef496143.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst ConvertTime = ms => {\r\n    const msSeconds = 1000\r\n    const msMinutes = msSeconds * 60\r\n    const msHours = msMinutes * 60\r\n    const hours = Math.floor(ms / msHours)\r\n    const Rhours = ms % msHours\r\n    const minutes = Math.floor(Rhours / msMinutes)\r\n    const Rminutes = Rhours % msMinutes\r\n    const seconds = Math.floor(Rminutes / msSeconds)\r\n\r\n    return String(hours).padStart(2, '0') + ':' + String(minutes).padStart(2, '0') + ':' + String(seconds).padStart(2, '0')\r\n}\r\n\r\nconst Times = ({ ms }) => {\r\n    return (<div className='timerClock'>\r\n        <div className='timerBlock'>\r\n            <div className='timerNumbers'>\r\n                {ConvertTime(ms)}\r\n            </div>\r\n            <div className='timerText'>\r\n                <p className='timerTextItems'>Heures</p>\r\n                <p className='timerTextItems'>Minutes</p>\r\n                <p className='timerTextItems'>Secondes</p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Times","import React from 'react'\r\nimport { Component } from 'react'\r\nimport Times from './Times'\r\n\r\n\r\nclass Timer extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            timeMs: 0,\r\n            inter: false\r\n        }\r\n        setInterval(\r\n            () => {\r\n                this.state.inter &&\r\n                    this.setState({\r\n                        timeMs: this.state.timeMs + 1000\r\n                    })\r\n            },\r\n            1000\r\n        )\r\n    }\r\n    start = () => {\r\n        if (!this.state.inter){\r\n            this.setState({\r\n                inter: true\r\n            })\r\n        } else {\r\nthis.setState({inter:false})\r\n        }   \r\n        }\r\n    reset = () => {\r\n        this.setState({timeMs: 0, inter: false})\r\n    }   \r\n    render() {\r\n        return (\r\n            <div className='buttons'>\r\n                <Times ms={this.state.timeMs} />\r\n                <input type='button'\r\n                    value={this.state.inter ? 'Pause' : 'Start'}\r\n                    className='startButton'\r\n                    onClick={this.start} />\r\n                <input type='button'\r\n                    value='Reset'\r\n                    className='resetButton'\r\n                    onClick={this.reset} />\r\n            </div>)\r\n    }\r\n}\r\n\r\nexport default Timer","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './components/Timer.css';\nimport Timer from './components/Timer';\n\n\nconst App = () => {\n  return <div>\n    <Timer/>\n  </div>\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}